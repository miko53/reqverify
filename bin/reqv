#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'reqv_main'

# main application class
class Main
  EXIT_FAILURE = 1

  def initialize
    @working_dir = ''
    @output_folder = ''
    @project = nil
  end

  # main entry point function
  # read the command-line argument
  # check them
  # and execute requested action
  def main
    reqv = ReqvMain.new
    options = read_args
    reqv.initialize_log_level(options)
    check_options(options)
    p = reqv.load_project_check_working_dir(options)
    reqv.parse_and_launch_action(options) unless p.nil?
  end

  # This method read command-line arguments
  # and returns +options+ hash of argument
  def read_args # rubocop:disable Metrics/MethodLength, Metrics/AbcSize
    options = {}
    OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
      opts.banner = "Usage: #{$PROGRAM_NAME} "
      opts.on('-pPROJECT_FILE', '--project=PROJECT_FILE', 'provide project file') do |n|
        options[:project_file] = n
      end
      opts.on('-rRELATIONSHIP', '--relationship=RELATIONSHIP', 'concerned traceability to check/export') do |n|
        options[:relationship] = n
      end
      opts.on('-aACTION', '--action=ACTION', 'action to launch (status/export/list/clean)') do |n|
        options[:action] = n
      end
      opts.on('-DDOCUMENT', '--document=DOCUMENT', 'document to list requirement') do |n|
        options[:doc] = n
      end
      opts.on('-oOUTPUT_FOLDER', '--output-folder=OUTPUT_FOLDER', 'folder where stored result') do |n|
        options[:output_folder] = n
      end
      opts.on('-fOUTPUT_FILE', '--output-file=OUTPUT_FILE', 'file where stored result') do |n|
        options[:output_file] = n
      end
      opts.on('-FFORMAT', '--format-export=FORMAT', 'export file format csv,xlsx') do |n|
        options[:export_format] = n
      end
      opts.on('-LPLUGINS_PATH', '--plugins-path=PLUGINS_PATH', 'custom path of import plugins') do |n|
        options[:plugins_path] = n
      end
      opts.on('-d', '--[no-]debug', 'Run with debug info') do |n|
        options[:debug] = n
      end
      opts.on('-v', '--[no-]verbose', 'Run with verbose info') do |n|
        options[:verbose] = n
      end

      opts.on('-c', '--[no-]colorize', 'colorize the output') do |n|
        options[:colorize] = n
      end

      opts.on('-h', '--help', 'Print this help') do |n|
        puts opts
        puts '  Possible actions are: '
        puts '  - status, generate and display traceability status on output console'
        puts '  - export, generate and display traceability on file/folder given in argument'
        puts '  - list, list all requirement of a document'
        puts '  - clean, remove all intermediate file, to build again yaml requirement file'
        exit
      end
    end.parse!
    # pp options
    options
  end

  # check if given +options+ (hash data come from command-line)
  # are correct
  # return to shell if mandatory option are not given
  def check_options(options)
    failure = false

    if options[:action].nil?
      Log.error 'need to provide action, see help'
      failure = true
    end

    if (options[:action] == 'export') && options[:export_format].nil?
      Log.error 'format not provided'
      failure = true
    end

    if options[:project_file].nil?
      Log.error 'need to provide project file, see help'
      failure = true
    end

    if (options[:action] == 'list') && options[:doc].nil?
      Log.error 'need to provide a doc for list requirement'
      failure = true
    end

    return unless failure

    exit EXIT_FAILURE
  end
end

app = Main.new
app.main
